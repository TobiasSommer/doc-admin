<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<chapter id="performance-tuning">
    <title>パフォーマンス・チューニング</title>

    <abstract>
    <para>
    以下はOTRS導入のための強化テクニックのパフォーマンスのリストです。構成、コーディング、メモリー使用、その他を含みます。
    </para>
    </abstract>

    <section id="performance-tuning-otrs">
        <title>OTRS</title>
        <para>
        OTRSのパフォーマンスを改善するいくつかのオプションがあります。
        </para>

        <section id="performance-tuning-otrs-index">
            <title>TicketIndexModule</title>
            <para>
                There are two backend modules for the index for the ticket queue view:

                <itemizedlist>

                    <listitem>
                        <para>
                        Using <literal>Kernel::System::Ticket::IndexAccelerator::RuntimeDB</literal>
(default), generate each queue view on the fly from the ticket table. You
will not have performance trouble until you have about 60,000 open tickets
in your system.
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                        <literal>Kernel::System::Ticket::IndexAccelerator::StaticDB</literal>, the
most powerful module, should be used when you have above 80,000 open
tickets. It uses an extra ticket_index table, which works like a view. Use
<filename>bin/otrs.Console.pl Maint::Ticket::QueueIndexRebuild</filename>
for generating an initial index after switching backends.
                        </para>
                    </listitem>

                </itemizedlist>

                SysConfig経由でIndexAcceleratorを変更することができます。
            </para>

        </section>

        <section id="performance-tuning-otrs-storage">
            <title>TicketStorageModule（チケット・格納・モジュール）</title>
            <para>
            チケット・記事記憶装置用の2つの異なるバックエンド・モジュールがあります:
            </para>

            <para>
            <itemizedlist>

                <listitem>
                <para>
                Configure <literal>Kernel::System::Ticket::ArticleStorageDB</literal>
(default) to store attachments, etc., in the database. Note: Don't use it
with large setups.
                </para>
                <para>
                賛成意見:ウェブサーバー・ユーザが「otrs」ユーザでない場合は、ファイル許可問題を回避するためにこのモジュールを使用してください。
                </para>
                <para>
                反対意見:あなたのデータベースに添付ファイルをを格納することは望ましくありません。あなたのデータベースは大きなオブジェクトを格納できることに気を配って下さい。例えば8MBのオブジェクト(デフォルトは2MBです)を格納するために「set-variable
= max_allowed_packet=8M」でMySQLを設定します。
                </para>
                </listitem>

                <listitem>
                <para>
                Configure <literal>Kernel::System::Ticket::ArticleStorageFS</literal> to
store attachments etc. on the local file system. Note: Recommended for large
setups.
                </para>
                <para>
                賛成意見: 速いですね!
                </para>
                <para>
                反対意見:ウェブサーバ・ユーザは「otrs」ユーザであるべきです。さらに、多数のフロントエンドのサーバーを持つなら、、ファイルシステムがサーバー間で共有されることを確かめるべきです。NFS共有か可能ならSANかそれに類似のソリューションに置いて下さい。
                </para>
                </listitem>

            </itemizedlist>

            </para>

            <para>
                Note: you can switch from one back-end to the other on the fly. You can
switch the backend in the SysConfig, and then run the command line utility
<filename>bin/otrs.Console.pl Admin::Article::StorageSwitch</filename> to
put the articles from the database onto the filesystem or the other way
around. You can use the <emphasis>--target</emphasis> option to specify the
target backend. Please note that the entire process can take considerable
time to run, depending on the number of articles you have and the available
CPU power and/or network capacity.
            </para>

            <para>
                <screen><![CDATA[
shell> bin/otrs.Console.pl Admin::Article::StorageSwitch --target ArticleStorageFS
                ]]></screen> <emphasis>Script: Switching storage
back-ends from database to filesystem.</emphasis>
            </para>
            <para>
                If you want to keep old attachments in the database, you can activate the
SysConfig option <literal>Ticket::StorageModule::CheckAllBackends</literal>
to make sure OTRS will still find them.
            </para>
        </section>

        <section>
            <title>チケットのアーカイブに保管</title>

            <para>
                監査に耐えうるシステムとしてOTRSを使うならば、完了したチケットを削除することはよい考えとはいえません。そのため我々はチケットをアーカイブすることができる機能を実装しました。
            </para>
            <para>
                Tickets that match certain criteria can be marked as "archived". These
tickets are not accessed if you do a regular ticket search or run a Generic
Agent job. The system itself does not have to deal with a huge amount of
tickets any longer as only the "latest" tickets are taken into consideration
when using OTRS. This can result in a huge performance gain on large
systems.
            </para>
            <para>
                アーカイブ機能を使用するには次のステップに従います:
            </para>
            <orderedlist>
                <listitem>
                    <para>
                        SysConfigのアーカイブシステムを活性化します。
                    </para>
                    <para>
                        管理者ページで、SysConfigに行って、グループ・<literal>チケット</literal>を選択してください。<literal>Core::Ticket</literal>では、デフォルトで「no」にセットされるオプション<literal>Ticket::ArchiveSystem</literal>を見つけます。この設定を「yes」に変更し変更を保存します。
                    </para>
                </listitem>
                <listitem>
                    <para>
                        GenericAgentジョブを定義する
                    </para>
                    <para>
                        管理者ページでGenericAgentを選択し新規ジョブをそこへ追加します。<orderedlist>
                            <listitem>
                                <para>
                                    ジョブ設定
                                </para>
                                <para>
                                    アーカイブに保管するジョブの名前を与え、この仕事を予定する適切なオプションを選択してください。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    チケット・フィルタ
                                </para>
                                <para>
                                    チケット・フィルタは選択された基準と一致するチケット検索です。完了した状態（数か月前に完了したた）のチケットのみをアーカイブするのは良い考えです。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    チケット・アクション
                                </para>
                                <para>
                                    このセクションでは、「選択したチケットをアーカイブ」「チケットをアーカイブ」とラベルしたフィールドをセットしてください。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    仕事を保存する
                                </para>
                                <para>
                                    ページの終わりに、仕事を保存するオプションを見つけるでしょう。
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    影響を受けたチケット
                                </para>
                                <para>
                                    システムは、一般担当者のジョブを実行する時にアーカイブされる全てのチケットを表示します。
                                </para>
                            </listitem>
                        </orderedlist>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        チケット検索
                    </para>
                    <para>
                        チケットを検索する場合、システムはデフォルトでアーカイブに保管されないチケットを探索します。さらにアーカイブに保管されたチケットを捜したい場合は、検索基準を定義する時に単に「archive
search」を加えてください。
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section id="performance-tuning-otrs-cache">
            <title>キャッシュ</title>
            <para>
                OTRS caches a lot of temporary data in
<filename>/opt/otrs/var/tmp</filename>.  Please make sure that this uses a
high performance file system/storage.  If you have enough RAM, you can also
try to put this directory on a ramdisk like this: <screen><![CDATA[
shell> /opt/otrs/bin/otrs.Console.pl Maint::Session::DeleteAll
shell> /opt/otrs/bin/otrs.Console.pl Maint::Cache::Delete
shell> sudo mount -o size=16G -t tmpfs none /opt/otrs/var/tmp

# add persistent mount point in /etc/fstab
                ]]></screen>
            </para>
            <note>
                <para>
                    Please note that this will be a non-permanent storage that will be lost on
server reboot.  All your sessions (if you store them in the filesystem) and
your cache data will be lost.
                </para>
            </note>
            <para>
                There is also a centralized memcached based Cache backend available for
purchase from OTRS Group.
            </para>
        </section>

    </section>


    <section id="performance-tuning-database">
        <title>データベース</title>
        <para>
        DB発行は使用されているデータベースによって変わります。データベース管理者とデータベースかチェックのためのドキュメンテーションを研究してください。
        </para>

        <section id="performance-tuning-database-mysql">
            <title>MySQL</title>
            <para>
            MySQLテーブル・タイプMyISAM(デフォルトです)を使用し、テーブルの大部分を削除したならば、あるいは可変長列(VARCHAR、BLOBあるいはTEXTカラムがあるテーブル)でテーブルに多くの変更を加えていれば、「optimize（最適化）」コマンドでデータ・ファイル(テーブル)をフラグメンテーション解消しなければいけません。
            </para>
            <para>
            mysqldデーモンがCPU時間の多くを必要とする場合、テーブルの最適化を試みるべきです。-
チケット、ticket_historyおよび記事(下記のスクリプトを参照)。
            </para>

            <para>
            <screen><![CDATA[
shell> mysql -u user -p database
mysql> optimize table ticket;
mysql> optimize table ticket_history;
mysql> optimize table article;
            ]]></screen>
            </para>

            <para>
            <emphasis>スクリプト:データ・ベース・テーブルの最適化。</emphasis>
            </para>

        </section>

        <section id="performance-tuning-database-postgresql">
            <title>PostgreSQL</title>
            <para>
            PostgreSQL is best tuned by modifying the
<filename>postgresql.conf</filename> file in your PostgreSQL data
directory. For advice on how to do this, reference the following articles:
            </para>

            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                        <ulink url="http://www.revsys.com/writings/postgresql-performance.html">
<citetitle>http://www.revsys.com/writings/postgresql-performance.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        <ulink url="http://varlena.com/GeneralBits/Tidbits/perf.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/perf.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        <ulink url="http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html">
<citetitle>http://varlena.com/GeneralBits/Tidbits/annotated_conf_e.html</citetitle>
</ulink>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>

            <para>
            パフォーマンスが不十分な場合、PostgreSQLパフォーマンス・メーリング・リスト( <ulink
url="http://www.postgresql.org/community/lists/">http://www.postgresql.org/community/lists/</ulink>
)に参加しそこに質問をすることを提案します。PostgreSQLリスト上の人々は非常にフレンドリーで、おそらく助けてくれることでしょう。
            </para>
        </section>

    </section>

    <section id="performance-tuning-webserver">
        <title>ウェブサーバ</title>
        <para>
        mod_perl 2.0( <ulink
url="http://perl.apache.org/"><citetitle>http://perl.apache.org/</citetitle></ulink>
)を使用するべきです。それは純粋なcgiよりはるかに速い(~ * 100)。しかし、それはより多くのRAMを必要とします。
        </para>

        <section id="performance-tuning-webserver-db">
            <title>事前に確立しているデータベース接続</title>
            <para>
            ウェブサーバのスタートアップに先んじてあらかじめデータベース接続を確立することができます。時間の節約になります(README.webserverを参照)。
            </para>
        </section>

        <section id="performance-tuning-webserver-startup">
            <title>プレインストールされたモジュール - startup.pl</title>
            <para>
            スタートアップ・スクリプト・スクリプト<filename>scripts/apache2-perl-startup.pl</filename>を使用して下さい。それはmod_perlウェブサーバ上の事前ロードされ、コンパイルされたPerlをより早くします。しかもより小さいメモリで。(README.webserverを参照)。
            </para>
        </section>
        <section id="performance-tuning-webserver-reload">
            <title>ディスク上で更新された時パール・モジュールをリロードします。</title>
            <para>
            By default Apache::Reload is used in
<filename>scripts/apache2-httpd.include.conf</filename>. Disable it and you
will get 8% more speed. But remember to restart the web server if you
install any modules via the OTRS Package Manager, or any values in your
SysConfig or in <filename>Kernel/Config.pm</filename>. Important: this would
also mean you can't use the OTRS Package Manager via the web interface, you
need to use the command line variant -
<filename>bin/otrs.PackageManager.pl</filename>.
            </para>
        </section>

        <section id="performance-tuning-webserver-strategy">
            <title>正しい戦略の選択</title>
            <para>
            より大きな装置(例えば40人以上担当者または1,000枚/day以上の新しいチケット)を持っているなら、mod_perlユーザ・ガイド( <ulink
url="http://perl.apache.org/docs/2.0/user/index.html"><citetitle>http://perl.apache.org/docs/2.0/user/index.html</citetitle></ulink>
)の性能についての章を読むと良いでしょう。
            </para>
        </section>

        <section id="performance-tuning-webserver-gzip">
            <title>mod_gzip/mod_deflate</title>
            <para>
            帯域幅が小さい場合は、Apache2用のmod_deflateをご利用ください。45000のHTMLページを持っているなら、mod_gzip/mod_deflate　は約7000にそれを圧縮します。欠点は、これがサーバー側のロードを増加させるということです。
            </para>
        </section>

    </section>

</chapter>
