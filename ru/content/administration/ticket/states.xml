<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="states">
<title>Состояния заявок</title>

<section id="states-predefined">
<title>Предопределенные состояния</title>

<para>
OTRS позволяет изменять предопределенные состояния заявок и их типы, а также
добавлять новые. Для состояния важны два атрибута: имя (state-name) и тип
(state-type).
</para>

<para>
Предустановленные состояния в OTRS: "закрыто успешно", "закрыто неудачно",
"обьеденено", "новая", "открытая", "в ожидании с автозакрытием+", "в
ожидании с автозакрытием-", "в ожидании с напоминанием", "удаленная".
</para>

<section id="state-new">
<title>Новая</title>
<para>
Заявки находятся в этом состоянии, когда они создаются на основе входящих
сообщений электронной почты.
</para>
</section>

<section id="state-open">
<title>Открытая</title>
<para>
Это состояние по умолчанию для заявок, которые присвоены очередям или
агентам.
</para>
</section>

<section id="state-pending-reminder">
<title>Ожидание с напоминанием</title>
<para>
После того как время ожидания истекло, владелец заявки будет получать
напоминание на электронную почту. Если заявка не закрыта, то напоминание о
заявке будет отправлено всем агентам в очереди. Напоминание о заявках будет
отправлено только в рабочее время и будет повторятся каждые 24-часа, пока
агент не изменит состояние заявки. Время, которое заявка проведет с таким
статусом будет добавлено к времени эскалации.
</para>
</section>

<section id="state-pending-autoclose-minus">
<title>Ожидание авто-закрытие -</title>
<para>
Если время ожидания вышло, заявки с этим статусом будут установлены в
"Закрытые неуспешно". Время, проведенное заявкой в этом статусе будет
добавлено к времени эскалации.
</para>
</section>

<section id="state-pending-autoclose-plus">
<title>Ожидание авто-закрытие+</title>
<para>
Если вышло время ожидания, заявки с этим статусом будут установлены в
"Закрыто Успешно". Время, проведенное заявкой в этом статусе будет добавлено
к времени эскалации.
</para>
</section>

<section id="state-merged">
<title>Обьедененные</title>
<para>
Это состояние для заявок, которые были объеденены с другими заявками.
</para>
</section>

<section id="state-closed-successful">
<title>Закрыта Успешно</title>
<para>
Это конечное состояние для заявок, которые были решены успешно. В
зависимости от конфигурации, у вас будет или не будет возможности заново
открыть ранее закрытые заявки.
</para>
</section>

<section id="state-closed-unsuccessful">
<title>Закрыта Неудачно</title>
<para>
Это конечное состояние для заявок которые НЕ были успешно решены. В
зависимости от конфигурации, у вас будет или не будет возможности заново
открыть ранее закрытые заявки.
</para>
</section>

</section>

<section id="states-customizing">
<title>Настраиваемы состояния</title>
<para>
Every state has a name (state-name) and a type (state-type). Click on the
<link linkend="adminarea-states">States</link> link on the Admin page and
press the button "Add state" to create a new state. You can freely choose
the name of a new state. The state types can not be changed via the web
interface. The database has to be directly modified if you want to add new
types or change existing names. The default state types should typically not
be modified as this can yield unpredictable results. For instance,
escalation calculations and the unlock feature are based on specific state
types.
</para>

<para>
Имя/название уже существующего состояния может быть изменено или новые
состояния добавлены на этом экране. Если состояние "new" было изменено в
веб-интерфейсе, это состояние также должно быть настроено в
<filename>Kernel/Config.pm</filename> или через SysConfig. Параметры
заданные в сценарии приведенном ниже должны быть изменены, чтобы убедиться в
том, что OTRS работает с измененным состоянием для бывшего "new".
</para>

<para>
<programlisting>
    [...]
    # PostmasterDefaultState
    # (The default state of new tickets.) [default: new]
    $Self-&gt;{PostmasterDefaultState} = 'new';

    # CustomerDefaultState
    # (default state of new customer tickets)
    $Self-&gt;{CustomerDefaultState} = 'new';
    [...]
</programlisting>
</para>

<para>
<emphasis>Сценарий: Изменение параметров настройки в
Kernel/Config.pm.</emphasis>
</para>

<para>
Если нужно добавить новый тип состояния, то это можно сделать с помощью
клиентской программы управления базами данных, изменив таблицу
ticket_state_type базы данных OTRS, как это показано в нижеприведенном
сценарии
</para>

<para>
<screen>
linux:~# mysql -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 23 to server version: 5.0.16-Debian_1-log

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

mysql&gt; use otrs;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&gt; insert into ticket_state_type (name,comments) values ('own','Own
state type');
Query OK, 1 row affected (0.00 sec)

mysql&gt; quit
Bye
linux:~#
</screen>
</para>

<para>
<emphasis>Script: Изменение базы данных OTRS.</emphasis>
</para>

<para>
На данный момент можно использовать новый тип состояния, который вы только
что создали. Как только состояние будет связано с этим новым типом
состояния, то чтобы убедится что новое состояние используется и работает
коректно нужно также изменить настройки OTRS. Используя SysConfig внесите
изменения в следующие опции:
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewPhoneNew:Ticket::Frontend::AgentTicketPhone_StateDefault">
Ticket -> Frontend::Agent::Ticket::ViewPhoneNew >
AgentTicketPhone###StateDefault </link> - задает следующее состояние по
умолчанию для новых заявок созданных на основе телефонного звонка.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewPhoneNew:Ticket::Frontend::AgentTicketPhone_StateType">
Ticket -> Frontend::Agent::Ticket::ViewPhoneNew >
AgentTicketPhone###StateType </link> - задает список последующих доступных
состояний для новых заявок, созданных на основе телефонного звонка.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewEmailNew:Ticket::Frontend::AgentTicketEmail_StateDefault">
Ticket -> Frontend::Agent::Ticket::ViewEmailNew >
AgentTicketEmail###StateDefault </link> -  задает следующее состояние по
умолчанию для новых заявок созданных на основе сообщений электронной почты.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewEmailNew:Ticket::Frontend::AgentTicketEmail_StateType">
Ticket -> Frontend::Agent::Ticket::ViewEmailNew >
AgentTicketEmail###StateType </link> - задает список последующих доступных
состояний для новых заявок созданных на базе сообщений электронной почты.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewPhoneOutbound:Ticket::Frontend::AgentTicketPhoneOutbound_State">
Ticket -&gt; Frontend::Agent::Ticket::ViewPhoneOutbound &gt;
AgentTicketPhoneOutbound###State </link> - задает значение по умолчанию
следующего состояния заявки при регистрации новых сообщений в заявке,
полученных от клиента по телефону.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewPhoneOutbound:Ticket::Frontend::AgentTicketPhoneOutbound_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewPhoneOutbound &gt;
AgentTicketPhoneOutbound###StateType </link> - задает доступные значения
следующего состояния заявки при регистрации новых сообщений в заявке,
полученных от клиента по телефону.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewMove:Ticket::Frontend::AgentTicketMove_State">
Ticket -> Frontend::Agent::Ticket::ViewMove > AgentTicketMove###State
</link> - Задает следующее состояние по умолчанию при перемещении заявки в
другую очередь.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewMove:Ticket::Frontend::AgentTicketMove_StateType">
Ticket -> Frontend::Agent::Ticket::ViewMove > AgentTicketMove###StateType
</link> - задает список последующих доступных состояний при перемещении
заявки в другую очередь.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewBounce:Ticket::Frontend::AgentTicketBounce_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewBounce &gt; StateDefault </link> -
задает следующее состояние заявки по умолчанию после ее возврата.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewBounce:Ticket::Frontend::AgentTicketBounce_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewBounce &gt; StateType </link> -
задает следующие доступные состояния заявки после ее возврата.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewBulk:Ticket::Frontend::AgentTicketBulk_StateDefault">
Ticket -> Frontend::Agent::Ticket::ViewBulk > StateDefault </link> - для
указания следующего состояния по умолчанию при массовом действии.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewBulk:Ticket::Frontend::AgentTicketBulk_StateType">
Ticket -> Frontend::Agent::Ticket::ViewBulk > StateType </link> - задает
список последующих доступных состояний при массовом действии.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewClose:Ticket::Frontend::AgentTicketClose_StateDefault">
Ticket -> Frontend::Agent::Ticket::ViewClose > StateDefault </link> - для
указания следующего состояния по умолчанию после закрытия заявки.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewClose:Ticket::Frontend::AgentTicketClose_StateType">
Ticket -> Frontend::Agent::Ticket::ViewClose > StateType </link> - задает
список последующих доступных состояний после закрытия заявки.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewCompose:Ticket::Frontend::AgentTicketCompose_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewCompose &gt; StateDefault </link>
- задает значение по умолчанию следующего состояния заявки на
странице/экране создания сообщения (ответа) агентом.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewCompose:Ticket::Frontend::AgentTicketCompose_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewCompose &gt; StateType </link> -
задает список доступных следующих состояний заявки на странице/экране
создания сообщения (ответа) агентом.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewForward:Ticket::Frontend::AgentTicketForward_StateDefault">
Ticket -&gt; Frontend::Agent::Ticket::ViewForward &gt; StateDefault </link>
- для задания следующего состояния после пересылки заявки.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewForward:Ticket::Frontend::AgentTicketForward_StateType">
Ticket -&gt; Frontend::Agent::Ticket::ViewForward &gt; StateType </link> -
для задания списка доступных следующих состояний для экрана
Переслать/Forward.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewFreeText:Ticket::Frontend::AgentTicketFreeText_StateDefault">
Ticket -> Frontend::Agent::Ticket::ViewForward > StateDefault </link> -
задает следующее состояние по умолчанию после редактирования свободных полей
заявки
</para>

<para>
<link
linkend="ConfigReference_Ticket:Frontend::Agent::Ticket::ViewFreeText:Ticket::Frontend::AgentTicketFreeText_StateType">
Ticket -> Frontend::Agent::Ticket::ViewForward > StateType </link> - задает
список доступных состояний после редактирования свободных полей заявки
</para>


<para>
<link
linkend="ConfigReference_Ticket:Core::PostMaster:PostmasterDefaultState">
Ticket -> Core::PostMaster > PostmasterDefaultState </link> - задает
состояние заявки созданной из электронного письма.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Core::PostMaster:PostmasterFollowUpState">
Ticket -> Core::PostMaster > PostmasterFollowUpState </link> - задает
состояние заявки после получения отклика клиента.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Core::PostMaster:PostmasterFollowUpStateClosed">
Ticket -> Core::PostMaster > PostmasterFollowUpStateClosed </link> - задает
состояние заявок после получения отклика клиента на уже закрытую заявку.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Core::Ticket:Ticket::ViewableStateType">
Ticket -> Core::Ticket > ViewableStateType </link> - задает типы состояний
заявок, которые отображаются в различных обзорах системы, например, в Обзоре
очередей.
</para>

<para>
<link linkend="ConfigReference_Ticket:Core::Ticket:Ticket::UnlockStateType">
Ticket -> Core::Ticket > UnlockStateType </link> - задает список типов
состояний для разблокированных заявок.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Core::Ticket:Ticket::PendingReminderStateType">
Ticket -> Core::Ticket > PendingReminderStateType </link> - задает тип
состояния для заявок с напоминанием.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Core::Ticket:Ticket::PendingAutoStateType">
Ticket -> Core::Ticket > PendingAutoStateType </link> - задает тип состояния
для отложенных заявок.
</para>

<para>
<link
linkend="ConfigReference_Ticket:Core::Ticket:Ticket::StateAfterPending">
Ticket -> Core::Ticket > StateAfterPending </link> - задает тип состояния
для заявок с автоожиданием после итечения срока ожидания.
</para>

</section>
</section>
