<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="acl" >
    <title>Списки Контроля Доступа (ACLs)</title>

    <section>
        <title>Введение</title>
        <para>
            Начиная с OTRS 2.0, Access Control Lists (ACLs) могут использоваться для
управления доступом к заявкам, модулям, очередям и пр., или для влияния на
действия по заявкам (закрытие, перемещение и т.д д.) в определенных
ситуациях. ACL могут быть использованы в дополнение к существующей системе
разрешений/прав <link linkend="adminarea-roles">Роли</link> и <link
linkend="adminarea-groups">Группы</link>. С использованием ACL могут быть
построены элементарные work-flows, основанные на атрибутах заявки.
        </para>
        <para>
            В основном, ACL используются для ограничения возможных действий над
заявками, основанные на заданном наборе правил.
        </para>
        <para>
            ACLs can be directly entered into the <filename>Kernel/Config.pm</filename>
file.  However this is not any more recommended as OTRS comes now with a GUI
<link linkend="adminarea-groups">Access Control Lists</link> in the Admin
panel that allows to save the ACLs in the Database as the first step and
then deploy them into a file when they are ready.
        </para>
        <para>
            This chapter has some ACL examples which will walk you through the process
of defining ACL definitions, and a reference of all possible important ACL
settings.
        </para>

        <warning>
            <para>The default user 'root@localhost' is not affected by the Ticket ACLs</para>
        </warning>
    </section>

    <section>
        <title>Описание</title>
        <para>
            The ACL definition can be split into two big parts, 'Matching' and
'Change'. In the matching sections the ACLs contains attributes that has to
be met in order to use the ACL. If the attributes defined in the ACL does
not match with the attributes that are sent, then the ACL does not take any
affect, but any other match ACL will. The change sections contains the rules
to reduce the possible options for a ticket.
        </para>
        <itemizedlist mark="round">
            <para>Разделы Условий</para>
            <listitem>
                <para>Properties</para>
                <para>
                    This section contains matching options that can be changed on the fly. For
example on a ticket creation time the data of the ticket changes dynamically
as the agent sets the information. If an ACL is set to match a ticket
attribute then only when the matching attribute is selected the ACL will be
active and might reduce other ticket attributes, but as soon as another
value is selected the ACL will not take any affect.
                </para>
            </listitem>
            <listitem>
                <para>PropertiesDatabase</para>
                <para>
                    This section is similar to 'Properties' but does not take changes in ticket
attributes that are not saved into the DataBase, this means that changing an
attribute without submit will not make any effect. This section is not use
for ticket creation screens (as tickets are not yet created in the
Database).
                </para>
            </listitem>
        </itemizedlist>
        <itemizedlist mark="round">
            <para>Раздел Действий</para>
            <listitem>
                <para>Possible</para>
                <para>
                    Секция Possible сужает список доступных действий или значений до указанных в
этой секции.
                </para>
            </listitem>
            <listitem>
                <para>PossibleAdd</para>
                <para>
                    Elements in PossibleAdd section add missing elements that were reduced in
other ACLs. PossibleAdd is only used in together with other ACLs that have
Possible or PossibleNot sections.
                </para>
            </listitem>
            <listitem>
                <para>PossibleNot</para>
                <para>
                    Эта секция используется для удаления отдельных элементов/значений из списка
доступных в текущий момент. Она может использоваться самостоятельно или
вместе с другими ACL с секциями Possible или PossibleAdd.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            In order to make the development of ACLs easier and more powerful there is a
set of so called modifiers for the attributes on each section. This
modifiers are explained below:
        </para>
        <itemizedlist mark="round">
            <para>Модификаторы</para>
            <listitem>
                <para>[Not]</para>
                <para>
                    Он используется для исключения значения, например: '[Not]2 low' в данном
случае речь идет о приоритетах заявки и будет иметь тот же результат, что и
перечисление: '1 very low', '3 normal', '4 high', '5 very high'.
                </para>
            </listitem>
            <listitem>
                <para>[RegExp]</para>
                <para>
                    Служит для задания регулярного выражения для проверки соответствия
нескольким значениям, например '[RegExp]low' для приоритетов будет
аналогично списку '1 very low', '2 low'.
                </para>
            </listitem>
            <listitem>
                <para>[regexp]</para>
                <para>Аналогично по действию с  [RegExp] но нечувствителен к регистру символов.</para>
            </listitem>
            <listitem>
                <para>[NotRegExp]</para>
                <para>
                    Negated regular expressions for example '[NotRegExp]low' talking about
priorities is the same as '3 normal', '4 high', '5 very high'.
                </para>
            </listitem>
            <listitem>
                <para>[Notregexp]</para>
                <para>Аналогично [NotRegExp], но нечувствительно к регистру.</para>
            </listitem>
        </itemizedlist>
    </section>

    <section>
    <title>Примеры</title>
        <para>
            Следующие примеры показывают оба способа представления ACL - в графическом и
текстовом виде.
        </para>
        <para>
            <example id="acl-move">
                <title
                    >Списки прав доступа (ACL) позволяют перемещать в очереди только заявки с
приоритетом 5.
                </title>
                <para>
                    This example shows you the basic structure of an ACL. First, it needs to
have a name. In this case, it is "100-Example-ACL". Note that the ACLs will
be numerically sorted before execution, so you should use the names
carefully.
                </para>
                <para>
                    Secondly, you have a "Properties" section which is a filter for your
tickets.  All the criteria defined here will be applied to a ticket to
determine if the ACL must be applied or not. In our example, a ticket will
match if it is in the queue "Raw" and has priority "5 very high". This is
also affected by changes in the form (e.g. if the ticket is the queue "Raw"
and had a priority "3 normal" at this moment the ACL will not match, but
then priority drop-down is selected and the priority is changed now to "5
very high" then will also match).
                </para>
                <para>
                    Наконец, раздел "Возможные" определяет изменения экрана. В нашем случае из
имеющихся очередей только очередь "Alert" может быть выбрана на странице
Заявки.
                </para>

                <para>
                    <figure>
                        <title>ACL 100-Example-ACL</title>
<screenshot>
<graphic fileref="screenshots/customization/acl-move.png" scalefit="1"
width="100%" contentdepth="100%"></graphic></screenshot></figure>
                </para>
<programlisting>
# ticket acl
$Self->{TicketAcl}->{'100-Example-ACL'} = {
    # match properties
    Properties => {
        # current ticket match properties
        Ticket => {
            Queue => ['Raw'],
            Priority => ['5 very high'],
        }
    },
    # return possible options (white list)
    Possible => {
        # possible ticket options (white list)
        Ticket => {
            Queue => ['Alert'],
        },
    },
};
                </programlisting></example>
        </para>

        <para>
            <example id="acl-move2">
                <title>
                    ACL позволяют перемещать в другие очереди только заявки с приоритетом 5, уже
имеющиеся в базе данных.
                </title>
                <para>
                    Этот пример очень похож на предыдущий, но в этом случае только заявки в
очереди "Raw" и с приоритетом "5 very high", уже имеющиеся в базе данных
будут соответствовать критерию. Такой тип ACL не учитывает изменения в
формах изменения заявки, до того как заявка будет действительно обновлена в
базе данных.
                </para>
                <para>
                    <figure>
                        <title>ACL 102-Example-ACL</title>
<screenshot>
<graphic fileref="screenshots/customization/acl-move2.png" scalefit="1"
width="100%" contentdepth="100%"></graphic></screenshot></figure>
                </para>
<programlisting>
# ticket acl
$Self->{TicketAcl}->{'102-Example-ACL'} = {
    # match properties
    PropertiesDatabase => {
        # current ticket match properties
        Ticket => {
            Queue => ['Raw'],
            Priority => ['5 very high'],
        }
    },
    # return possible options (white list)
    Possible => {
        # possible ticket options (white list)
        Ticket => {
            Queue => ['Alert'],
        },
    },
};
                </programlisting></example>
        </para>

        <para>
            <example id="acl-close" >
                <title>
                    Списки прав доступа (ACL) делают невозможным закрытие заявок в очереди raw и
скрывают кнопку "закрыть".
                </title>
                <para>
                    Здесь вы можете увидеть как поле заявки (состояние), может проверяться на
более чем возможное для ввода значение. Можно также ограничить возможные
действия, выполняемые над конкретной заявкой. В этом случае, заявка не может
быть закрыта.
                </para>
                <para>
                    <figure>
                        <title>ACL 102-Second-Example-ACL</title>
<screenshot>
<graphic fileref="screenshots/customization/acl-close.png" scalefit="1"
width="100%" contentdepth="100%"></graphic></screenshot></figure>
                </para>
<programlisting>
$Self->{TicketAcl}->{'102-Second-Example-ACL'} = {
    # match properties
    Properties => {
        # current ticket match properties
        Ticket => {
            Queue => ['Raw'],
        }
    },
    # return possible options (white list)
    Possible => {
        # possible ticket options (white list)
        Ticket => {
            State => ['new', 'open', 'pending reminder'],
        },
    },
    # return also not possible options (black list)
    PossibleNot => {
        # not possible action options
        Action => [ 'AgentTicketClose' ],
    },
};
                </programlisting></example>
        </para>

        <para>
            <example id="acl-state" >
                <title>ACL удаляет навсегда возможность установить состояние "closed successful".</title>
                <para>
                    Этот пример показывает как можно использовать "негативные" фильтры
(состояние "closed successful"  будет удалено из списков выбора). Вы также
можете видеть, что не заданные условия для "properties" для заявки будет
означать, что оно верно для всех заявок, т.е. ACL применяется всегда. Это
может быть полезно, если вы желаете скрыть определенные значения по
умолчанию и допустить ввод других значений только в заданных обстоятельствах
(например, если агент принадлежит определенной группе).
                </para>
                 <para>
                    <figure>
                        <title>ACL 103-Third-ACL-Example</title>
<screenshot>
<graphic fileref="screenshots/customization/acl-state.png" scalefit="1"
width="100%" contentdepth="100%"></graphic></screenshot></figure>
                </para>
<programlisting>
$Self->{TicketAcl}->{'103-Third-ACL-Example'} = {
    # match properties
    Properties => {
        # current ticket match properties (match always)
    },
    # return possible options
    PossibleNot => {
        # possible ticket options
        Ticket => {
            State => ['closed successful'],
        },
    },
};
                </programlisting></example>
        </para>

        <para>
            <example id="acl-new-ticket-service" >
                <title>
                    ACL только отображает Hardware-сервисы для заявок, которые были созданы в
очередях, начинающихся с &quot;HW&quot;.
                </title>
                <para>
                    Этот пример также показывает как можно использовать регулярные выражения для
сопоставления заявок и фильтрации доступных опций.
                </para>
                 <para>
                    <figure>
                        <title>ACL 104-Only-Hardware-Services-for-HW-Queues-ACL</title>
<screenshot>
<graphic fileref="screenshots/customization/acl-new-ticket-service.png"
scalefit="1" width="100%" contentdepth="100%"></graphic></screenshot></figure>
                </para>
<programlisting>
$Self->{TicketAcl}->{'104-Only-Hardware-Services-for-HW-Queues-ACL'} = {
    # match properties
    # note we don't have "Ticket => {" because there's no ticket yet
    Properties => {
    Queue => {
        Name => ['[RegExp]HW'],
        }
    },
    # return possible options
    Possible => {
        # possible ticket options
        Ticket => {
            Service => ['[RegExp]^(Hardware)'],
        },
    },
};
                </programlisting></example>
        </para>

        <para>
            <example id="acl-disallow-process-for-customerid" >
                <title>
                    ACL для ограничения доступа к Процессу в интерфейсе клиента по CustomerID.
                </title>
                 <para>
                    <figure>
                        <title>ACL 105-Disallow-Process-For-CustomerID - Запретить Процессы для этого
CustomerID</title>
<screenshot>
<graphic
fileref="screenshots/customization/acl-disallow-process-for-customerid.png"
scalefit="1" width="100%" contentdepth="100%"></graphic></screenshot></figure>
                </para>
<programlisting>
$Self->{TicketAcl}->{"105-Disallow-Process-For-CustomerID"} = {
    'Possible' => {},
    'PossibleNot' => {
        'Process' => [
            'P14'
        ]
    },
    'Properties' => {
        'CustomerUser' => {
            'UserCustomerID' => [
                'CustomerID'
            ]
        }
    },
    'PropertiesDatabase' => {},
    'StopAfterMatch' => 0
};
                </programlisting></example>
        </para>

    </section>

    <section id="acl-reference">
        <title>Сссылка</title>
        <para>
            В нижеприведенном Сценарии представлен список всех параметров, которые могут
быть использованы для списка прав доступа (ACLs).
        </para>
        <para>
            Смотрите <link linkend="process-management-acl">секция ACL</link> в <link
linkend="process-management">ProcessManagement</link> документации для
детального рассмотрения использования ACL для процессных заявок.
        </para>

        <para>
            <example>
                <title>Ссылка отображает все возможные важные настройки ACL</title>
<programlisting>
# ticket acl
$Self->{TicketAcl}->{'200-ACL-Reference'} = {
    # match properties (current values from the form)
    Properties => {

        # the used frontend module
        Frontend => {
            Action => ['AgentTicketPhone', 'AgentTicketEmail'],
        },

        # the logged in agent
        User => {
            UserLogin => ['some login'],
            Group_rw => [
                'hotline',
            ],
            Role => [
                'admin',
            ],
            # ...
        },

        # the logged in customer
        CustomerUser => {
            UserLogin => ['some login'],
            UserCustomerID => ['some customer id'],
            Group_rw => [
                'hotline',
            ],
            Role => [
                'admin',
            ],
            # ...
        },

        # process properties
        Process => {
            ProcessEntityID        => ['Process-9c378d7cc59f0fce4cee7bb9995ee3eb'],         # the Process that the current ticket is part of
            ActivityEntityID       => ['Activity-f8b2fdebe54eeb7b147a5f8e1da5e35c'],        # the current Activity of the ticket
            ActivityDialogEntityID => ['ActivityDialog-aff0ae05fe6803f38de8fff6cf33b7ce'],  # the current ActivityDialog that the Agent/Customer is using
        },

        # ticket properties
        Queue => {
            Name     => ['Raw'],
            QueueID  => ['some id'],
            GroupID  => ['some id'],
            Email    => ['some email'],
            RealName => ['OTRS System'],
            # ...
        },
        Service => {
            ServiceID => ['some id'],
            Name      => ['some name'],
            ParentID  => ['some id'],
            # ...
        },
        Type => {
            ID   => ['some id'],
            Name => ['some name'],
            # ...
        },
        Priority = {
            ID   => ['some id'],
            Name => ['some name'],
            # ...
        },
        SLA = {
            SLAID    => ['some id'],
            Name     => ['some name'],
            Calendar => ['some calendar'],
            # ...
        },
        State = {
            ID       => ['some id'],
            Name     => ['some name'],
            TypeName => ['some state type name'],,
            TypeID   => ['some state type id'],
            # ...
        },
        Owner => {
            UserLogin => ['some login'],
            Group_rw => [
                'some group',
            ],
            Role => [
                'admin',
            ],
            # ...
        },
        Responsible => {
            UserLogin => ['some login'],
            Group_rw => [
                'some group',
            ],
            Role => [
                'admin',
            ],
            # ...
        },
        DynamicField => {
            # Names must be in DynamicField_&lt;field_name&gt; format.
            # Values in [ ... ] must always be the untranslated internal data keys
            #   specified in the dynamic field definition and
            #   not the data values shown to the user.
            DynamicField_Field1          => ['some value'],
            DynamicField_OtherField      => ['some value'],
            DynamicField_TicketFreeText2 => ['some value'],
            # ...
        },
        # alternatively, ticket properties can be specified in the ticket hash
        Ticket => {
            Queue                => ['Raw'],
            State                => ['new', 'open'],
            Priority             => ['some priority'],
            Lock                 => ['lock'],
            CustomerID           => ['some id'],
            CustomerUserID       => ['some id'],
            Owner                => ['some owner'],
            DynamicField_Field1  => ['some value'],
            DynamicField_MyField => ['some value'],
            # ...
        },
    },

    # match properties (existing values from the database)
    PropertiesDatabase => {
        # See section "Properties", the same config can be used here.
        # ...
    }

    # reset possible options (white list)
    Possible => {
        # possible ticket options (white list)
        Ticket => {
            Queue => ['Hotline', 'Coordination'],
            State => ['some state'],
            Priority => ['5 very high'],
            DynamicField_Field1  => ['some value'],
            DynamicField_MyField => ['some value'],
            # ...
            NewOwner => ['some owner'],
            OldOwner => ['some owner'],
            # ...
        },

        # Limit the number of possible ActivityDialogs the Agent/Customer
        #   can use in a process ticket.
        ActivityDialog => ['AD1', 'AD3'],

        # Limit the number of possible Processes that can be started
        Process => ['Process-9c378d7cc59f0fce4cee7bb9995ee3eb', 'Process-12345678901234567890123456789012'],

        # possible action options (white list)
        Action => [
            'AgentTicketBounce',
            'AgentTicketPhone'.      # only used to show/hide the Split action
            'AgentLinkObject',       # only used to show/hide the Link action
            # ...
        ],
    },
    # add options (white list)
    PossibleAdd => {
        # See section "Possible"
        # ...
    },
    # remove options (black list)
    PossibleNot => {
        # See section "Possible"
        # ...
    },
};
                </programlisting></example>
        </para>
        <note>
            <para>
                При проверке ACLs, если CustomerUserID  параметр отправлен, механизм ACL
сравнивает заданный ACL используя представленный CustomerUserID для сбора
данных CustomerUser  для заполнения CustomerUser hash, а также перекрывает
информацию о клиенте в hash заявки для проверки в Properties. С другой
стороны эти вычисления также используются в PropertiesDatabase разделе, но с
использованием клиента заявки как основу для сбора данных.
            </para>
            <para>
                Обратите внимание, что в Пользовательском Интерфейсе, CustomerUserID всегда
отправляется с залогиненым Клиентом.
            </para>
            <para>
                Помните, что на экранах поиска (AgentTicketSearch и CustomerTicketSearch) -
единственно доступные атрибуты для ACL  это динамические поля. Это означает,
что для этих экранов вы не можете ограничить любые другие атрибуты, такие
как Тип заявки, Состояние, Очередь и т.д.
            </para>
            <para>
                From OTRS 4 the 'Action' parameter is not longer a hash but an array
reference and it can be used in any of the Change sections using any of the
Modifiers.
            </para>
        </note>
    </section>
</section>
